import java_cup.runtime.*;
import org.apache.log4j.*;
import ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSyntax error", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error at: ", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" on line ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, PRINT, RETURN, VOID, BREAK, CLASS, ELSE, CONST, IF, NEW, READ;
terminal EXTENDS, CONTINUE, FOR, STATIC, NAMESPACE, PLUS, MINUS, MUL, DIV;
terminal MOD, EQUAL, NOTEQU, GREATER, GREQU, LOWER, LOWEQU, LOGAND, LOGOR, ASSIGN;
terminal INCREMENT, DECREMENT, SEMI, COLON, COMMA, LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE;
terminal ARROW, DOT;
terminal Bool BOOLCONST;
terminal char CHARCONST;
terminal Integer NUMCONST;
terminal String IDENT;

nonterminal Program, ConstDecl, Type, ConstDeclList, ConstVals, ConstType, VarDeclList, VarDecl, VarType;
nonterminal DeclarationList, NamespaceList, Namespace;
nonterminal MethodDeclList, MethodDecl, MethType, FormParList, FormParam, LocalVarList, FormPars;
nonterminal StatementList, DesignatorStatement, Statement, Designator, DesignatorSuffix, DesignatorBase, DesignatorList;
nonterminal ClassDecl, ClassMethods, ClassExtends, ClassStaticVars, ClassStaticInitializers, ClassStaticInitializerList, ClassStaticInitializer;
nonterminal ClassVarList, ClassVarType, ClassStaticVar;

nonterminal Expr, Term, Factor, ActualPars;

nonterminal Condition, CondTerm, CondFact;
nonterminal ForHeader, ForList, ForCondition, AssignList;

nonterminal AssignOp, RelOp, AddOp, MulOp;

precedence left ELSE;

Program ::= (Program) PROG IDENT:name NamespaceList DeclarationList LBRACE MethodDeclList RBRACE;

NamespaceList ::= (NameSpaceListDecl) NamespaceList Namespace
            |
            (NameSpaceListEmpty) /* epsilon */
            ;


DeclarationList ::= (DeclarationListConst) DeclarationList ConstType
            |
            (DeclarationListTyped) DeclarationList VarType
            |
            (DeclarationListClass) DeclarationList ClassDecl
            |
            (DeclarationListEmpty) /* epsilon */
            ;

VarType ::= (VarType) Type VarDeclList SEMI
            |
            (VarTypeError) error:l SEMI {: parser.report_error("Error found in variable declaration, recovery until ';'", lleft); :}
            ;

ConstType ::= (ConstType) CONST Type ConstDeclList SEMI;

ClassDecl ::= (ClassDecl) CLASS IDENT:name ClassExtends LBRACE ClassStaticVars ClassStaticInitializers ClassVarList ClassMethods RBRACE;

ClassExtends ::= (ClassExtendsType) EXTENDS Type
            |
            (ClassExtendsError) error:l {: parser.report_error("Error during class declaration, recovery until '{'", lleft); :}
            |
            (ClassExtendsEmpty) /* epsilon */
            ;

ClassStaticVars ::= (ClassStaticVars) ClassStaticVar
            |
            (ClassStaticVarsEmpty) /* epsilon */
            ;

ClassStaticVar ::= (ClassStaticVar) ClassStaticVars STATIC ClassVarType;

ClassStaticInitializers ::= (ClassStaticInitializers) ClassStaticInitializerList
            |
            (ClassStaticInitializersEmpty) /* epsilon */
            ;

ClassStaticInitializerList ::= (ClassStaticInitializerListSingle) ClassStaticInitializer
            |
            (ClassStaticInitializerList) ClassStaticInitializerList ClassStaticInitializer
            ;

ClassStaticInitializer ::= (ClassStaticInitializer) STATIC LBRACE StatementList RBRACE;

ClassMethods ::= (ClassMethods) LBRACE MethodDeclList RBRACE
            |
            (ClassMethodsEmpty) /* epsilon */
            ;

MethodDeclList ::= (MethodDeclList) MethodDeclList MethodDecl
            |
            (MethodDeclListEmpty) /* epsilon */
            ;

MethodDecl ::= (MethodDecl) MethType IDENT:name LPAREN FormPars RPAREN LocalVarList LBRACE StatementList RBRACE;

ClassVarList ::= (ClassVarList) ClassVarList ClassVarType
            |
            (ClassVarListEmpty) /* epsilon */
            ;

ClassVarType ::= (ClassVarType) Type VarDeclList SEMI
            |
            (ClassVarTypeError) error:l SEMI {: parser.report_error("Error during variable declaration, recovery until ';'", lleft); :}
            ;

MethType ::= (MethVoid) VOID | (MethType) Type;

StatementList ::= (StatementList) StatementList Statement
            |
            (StatementListEmpty) /* epsilon */
            ;

Statement ::= (StatementDesignatorStatement) DesignatorStatement SEMI
            |
            (StatementIf) IF LPAREN Condition RPAREN Statement
            |
            (StatementIfElse) IF LPAREN Condition RPAREN Statement ELSE Statement
            |
            (StatementBreak) BREAK SEMI
            |
            (StatementContinue) CONTINUE SEMI
            |
            (StatementReturnExpr) RETURN Expr SEMI
            |
            (StatementReturn) RETURN SEMI
            |
            (StatementRead) READ LPAREN Designator RPAREN SEMI
            |
            (StatementPrint) PRINT LPAREN Expr RPAREN SEMI
            |
            (StatementPrintNumber) PRINT LPAREN Expr COMMA NUMCONST:number SEMI
            |
            (StatementFor) FOR LPAREN ForHeader RPAREN Statement
            |
            (StatementStatementList) LBRACE StatementList RBRACE
            ;

ForHeader ::= (ForHeader) ForList SEMI ForCondition SEMI ForList;

ForList ::= (ForList) AssignList
            |
            (ForListEmpty) /* epsilon */
            ;

ForCondition ::= (ForCondition) CondFact
            |
            (ForConditionEmpty) /* epsilon */
            ;

AssignList ::= (AssignList) AssignList COMMA DesignatorStatement
            |
            (AssignListSingle) DesignatorStatement
            ;

Condition ::= (Condition) Condition LOGOR CondTerm
            |
            (ConditionSingle) CondTerm
            |
            (ConditionError) error:l {: parser.report_error("Error found in if statement, recovery until ')'", lleft); :}
            ;

CondTerm ::= (CondTerm) CondTerm LOGAND CondFact
            |
            (CondTermSingle) CondFact
            ;

CondFact ::= (CondFactExpr) Expr
            |
            (CondFactRelExpr) Expr RelOp Expr
            ;

DesignatorStatement ::= (DesignatorStatementAssignExpr) Designator AssignOp Expr
            |
            (DesignatorStatementError) error:l {: parser.report_error("Error found in designator statement, recovery until ';'", lleft); :}
            |
            (DesignatorStatementCall) Designator LPAREN ActualPars RPAREN
            |
            (DesignatorStatementCallNoPars) Designator LPAREN RPAREN
            |
            (DesignatorStatementIncrement) Designator INCREMENT
            |
            (DesignatorStatementDecrement) Designator DECREMENT
            |
            (DesignatorStatementSquare) LSQUARE DesignatorList MUL Designator RSQUARE ASSIGN Designator
            ;


DesignatorList ::= (DesignatorList) DesignatorList Designator COMMA
            |
            (DesignatorListComma) DesignatorList COMMA
            |
            (DesignatorListEmpty) /* epsilon */
            ;

Designator ::= (Designator) DesignatorBase DesignatorSuffix;

DesignatorBase ::= (DesignatorBaseNamespace) IDENT COLON COLON IDENT
            |
            (DesignatorBase) IDENT
            ;

DesignatorSuffix ::= (DesignatorSuffixDot) DesignatorSuffix DOT IDENT
            |
            (DesignatorSuffixArray) DesignatorSuffix LSQUARE Expr RSQUARE
            |
            (DesignatorSuffixEmpty) /* epsilon */
            ;

FormPars ::= (FormPars) FormParList
            |
            (FormParsEmpty) /* epsilon */
            ;

FormParList ::= (FormParList) FormParList COMMA FormParam
            |
            (FormParListSingle) FormParam
            ;

LocalVarList ::= (LocalVarList) LocalVarList VarType
            |
            (LocalVarListEmpty) /* epsilon */
            ;

FormParam ::= (FormParam) Type IDENT:param
            |
            (FormParamArray) IDENT:param LSQUARE RSQUARE
            |
            (FormParamError) error:l {: parser.report_error("Error found in Formal parameter declaration, recovery until ')'", lleft); :}
            ;

Namespace ::= (NameSpace) NAMESPACE IDENT LBRACE DeclarationList LBRACE MethodDeclList RBRACE RBRACE;

VarDeclList ::= (VarDeclList) VarDeclList COMMA VarDecl
            |
            (VarDeclListSingle) VarDecl
            ;

ConstDeclList ::= (ConstDeclList) ConstDeclList COMMA ConstDecl
            |
            (ConstDeclListSingle) ConstDecl
            ;

ConstDecl ::= (ConstDecl) IDENT:name ASSIGN ConstVals;

VarDecl ::= (VarDecl) IDENT:var
            |
            (VarDeclArray) IDENT:var LSQUARE RSQUARE
            |
            (VarDeclError) error:l {: parser.report_error("Error found in variable declaration, recovery until ','", lleft); :}
            ;

ConstVals ::= (NumberConst) NUMCONST | (CharConst) CHARCONST | (BoolConst) BOOLCONST;

Type ::= (TypeNamespace) IDENT:typePrefix COLON COLON IDENT:typename
            |
            (Type) IDENT:typename
            ;

ActualPars ::= (ActualPars) ActualPars COMMA Expr
            |
            (ActualParsSingle) Expr
            ;

Expr ::= (ExprTerm) Term
            |
            (ExprMinusTerm) MINUS Term
            |
            (ExprAddop) Expr AddOp Term
            |
            (ExprAddopMinus) Expr AddOp MINUS Term
            ;

Term ::= (TermFactor) Factor
            |
            (TermMulOp) Term MulOp Factor
            ;

Factor ::= (FactorDesignator) Designator
            |
            (FactorCall) Designator LPAREN ActualPars RPAREN
            |
            (FactorCallNoPars) Designator LPAREN RPAREN
            |
            (FactorNumconst) NUMCONST:numberConstant
            |
            (FactorBoolconst) BOOLCONST:boolConstant
            |
            (FactorCharconst) CHARCONST:charConstant
            |
            (FactorNewArray) NEW Type LSQUARE Expr RSQUARE
            |
            (FactorNewType) NEW Type LPAREN ActualPars RPAREN
            |
            (FactorNewTypeNoPars) NEW Type LPAREN RPAREN
            |
            (FactorExpr) LPAREN Expr RPAREN
            ;

AssignOp ::= (AssignOp) ASSIGN;
RelOp ::= (Equal) EQUAL | (NotEqu) NOTEQU | (Greater) GREATER | (GrEqu) GREQU | (Lower) LOWER | (LowEqu) LOWEQU;
AddOp ::= (Plus) PLUS | (Minus) MINUS;
MulOp ::= (Mul) MUL | (Div) DIV | (Mod) MOD;