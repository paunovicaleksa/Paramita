import java_cup.runtime.*;
import org.apache.log4j.*;
import ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, PRINT, RETURN, VOID, BREAK, CLASS, ELSE, CONST, IF, NEW, READ;
terminal EXTENDS, CONTINUE, FOR, STATIC, NAMESPACE, PLUS, MINUS, MUL, DIV;
terminal MOD, EQUAL, NOTEQU, GREATER, GREQU, LOWER, LOWEQU, LOGAND, LOGOR, ASSIGN;
terminal INCREMENT, DECREMENT, SEMI, COLON, COMMA, LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE;
terminal ARROW, DOT;
terminal BOOLCONST, CHARCONST, NUMCONST, IDENT;

nonterminal Program, ConstDecl, Type, ConstDeclList, ConstVals, ConstType, VarDeclList, VarDecl, VarType;
nonterminal DeclarationList, NamespaceList, Namespace;
nonterminal MethodDeclList, MethodDecl, MethType, FormParList, FormParam, LocalVarList, FormPars;
nonterminal StatementList, DesignatorStatement, Statement, Designator, DesignatorSuffix, DesignatorBase, DesignatorList;
nonterminal ClassDecl, ClassMethods, ClassExtends, ClassStaticVars, ClassStaticInitializers;

nonterminal Expr, Term, Factor, ActualPars;

nonterminal Condition, CondTerm, CondFact;
nonterminal ForHeader, ForList, ForCondition, AssignList;

nonterminal AssignOp, RelOp, AddOp, MulOp;

precedence left ELSE;

Program ::= PROG IDENT NamespaceList DeclarationList LBRACE MethodDeclList RBRACE;

NamespaceList ::= NamespaceList Namespace
            |
            /* epsilon */
            ;


DeclarationList ::= DeclarationList ConstType
            |
            DeclarationList VarType
            |
            DeclarationList ClassDecl
            |
            /* epsilon */
            ;

VarType ::= Type VarDeclList SEMI
            |
            error SEMI
            ;

ConstType ::= CONST Type ConstDeclList SEMI;

ClassDecl ::= CLASS IDENT ClassExtends LBRACE ClassStaticVars ClassStaticInitializers LocalVarList ClassMethods RBRACE;

ClassExtends ::= EXTENDS Type
            |
            error
            |
            /* epsilon */
            ;

ClassStaticVars ::= ClassStaticVars STATIC VarType
            |
            /* epsilon */
            ;

ClassStaticInitializers ::=  STATIC LBRACE StatementList RBRACE ClassStaticInitializers
            |
            /* epsilon */
            ;

ClassMethods ::= LBRACE MethodDeclList RBRACE
            |
            /* epsilon */
            ;

MethodDeclList ::= MethodDeclList MethodDecl
            |
            /* epsilon */
            ;

MethodDecl ::= MethType IDENT LPAREN FormPars RPAREN LocalVarList LBRACE StatementList RBRACE;

MethType ::= VOID | Type;

StatementList ::= StatementList Statement
            |
            /* epsilon */
            ;

Statement ::= DesignatorStatement SEMI
            |
            IF LPAREN Condition RPAREN Statement
            |
            IF LPAREN Condition RPAREN Statement ELSE Statement
            |
            BREAK SEMI
            |
            CONTINUE SEMI
            |
            RETURN Expr SEMI
            |
            RETURN SEMI
            |
            READ LPAREN Designator RPAREN SEMI
            |
            PRINT LPAREN Expr RPAREN SEMI
            |
            PRINT LPAREN Expr COMMA NUMCONST SEMI
            |
            FOR LPAREN ForHeader RPAREN Statement
            |
            LBRACE StatementList RBRACE
            ;

ForHeader ::= ForList SEMI ForCondition SEMI ForList;

ForList ::= AssignList
            |
            /* epsilon */
            ;

ForCondition ::= CondFact
            |
            /* epsilon */
            ;

AssignList ::= AssignList COMMA DesignatorStatement
            |
            DesignatorStatement
            ;

Condition ::= Condition LOGOR CondTerm
            |
            CondTerm
            |
            error
            ;

CondTerm ::= CondTerm LOGAND CondFact
            |
            CondFact
            ;

CondFact ::= Expr
            |
            Expr RelOp Expr
            ;

DesignatorStatement ::= Designator AssignOp Expr
            |
            error
            |
            Designator LPAREN ActualPars RPAREN
            |
            Designator LPAREN RPAREN
            |
            Designator INCREMENT
            |
            Designator DECREMENT
            |
            LSQUARE DesignatorList MUL Designator RSQUARE ASSIGN Designator
            ;


DesignatorList ::= DesignatorList Designator COMMA
            |
            DesignatorList COMMA
            |
            /* epsilon */
            ;

Designator ::= DesignatorBase DesignatorSuffix;

DesignatorBase ::= IDENT COLON COLON IDENT
            |
            IDENT
            ;

DesignatorSuffix ::= DesignatorSuffix DOT IDENT
            |
            DesignatorSuffix LSQUARE Expr RSQUARE
            |
            /* epsilon */
            ;

FormPars ::= FormParList
            |
            /* epsilon */
            ;

FormParList ::= FormParList COMMA FormParam
            |
            FormParam
            ;

LocalVarList ::= LocalVarList VarType
            |
            /* epsilon */
            ;

FormParam ::= Type IDENT
            |
            Type IDENT LSQUARE RSQUARE
            |
            error
            ;

Namespace ::= NAMESPACE IDENT LBRACE DeclarationList LBRACE MethodDeclList RBRACE RBRACE;

VarDeclList ::= VarDeclList COMMA VarDecl
            |
            VarDecl
            ;

ConstDeclList ::= ConstDeclList COMMA ConstDecl
            |
            ConstDecl
            ;

ConstDecl ::= IDENT ASSIGN ConstVals;

VarDecl ::= IDENT
            |
            IDENT LSQUARE RSQUARE
            |
            error
            ;

ConstVals ::= NUMCONST | CHARCONST | BOOLCONST;

Type ::= IDENT COLON COLON IDENT
            |
            IDENT
            ;

ActualPars ::= ActualPars COMMA Expr
            |
            Expr
            ;

Expr ::= Term
            |
            MINUS Term
            |
            Expr AddOp Term
            |
            Expr AddOp MINUS Term
            ;

Term ::= Factor
            |
            Term MulOp Factor
            ;

Factor ::= Designator
            |
            Designator LPAREN ActualPars RPAREN
            |
            Designator LPAREN RPAREN
            |
            NUMCONST
            |
            BOOLCONST
            |
            CHARCONST
            |
            NEW Type LSQUARE Expr RSQUARE
            |
            NEW Type LPAREN ActualPars RPAREN
            |
            NEW Type LPAREN RPAREN
            |
            LPAREN Expr RPAREN
            ;

AssignOp ::= ASSIGN;
RelOp ::= EQUAL | NOTEQU | GREATER | GREQU | LOWER | LOWEQU;
AddOp ::= PLUS | MINUS;
MulOp ::= MUL | DIV | MOD;