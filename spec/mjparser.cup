import java_cup.runtime.*;
import org.apache.log4j.*;
import ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, PRINT, RETURN, VOID, BREAK, CLASS, ELSE, CONST, IF, NEW, READ;
terminal EXTENDS, CONTINUE, FOR, STATIC, NAMESPACE, PLUS, MINUS, MUL, DIV;
terminal MOD, EQUAL, NOTEQU, GREATER, GREQU, LOWER, LOWEQU, LOGAND, LOGOR, ASSIGN;
terminal INCREMENT, DECREMENT, SEMI, COLON, COMMA, LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE;
terminal ARROW, DOT;
terminal BOOLCONST, CHARCONST, NUMCONST, IDENT;

nonterminal Program, ConstDecl, Type, ConstDeclList, ConstVals, VarDeclList, VarDecl;
nonterminal DeclarationList, NamespaceList, Namespace;
nonterminal MethodDeclList, MethodDecl, MethType, FormParList, FormParam, LocalVarList, FormPars;

Program ::= PROG IDENT NamespaceList DeclarationList LBRACE MethodDeclList RBRACE; /* TODO: classes */

NamespaceList ::= NamespaceList Namespace
            |
            /* epsilon */
            ;


DeclarationList ::= DeclarationList CONST Type ConstDeclList SEMI
            |
            DeclarationList Type VarDeclList SEMI
            |
            /* epsilon */
            ;

MethodDeclList ::= MethodDeclList MethodDecl
            |
            /* epsilon */
            ;

MethodDecl ::= MethType IDENT LPAREN FormPars RPAREN LocalVarList LBRACE RBRACE; /* TODO: Statements */

MethType ::= VOID | Type;

FormPars ::= FormParList
            |
            /* epsilon */
            ;

FormParList ::= FormParList COMMA FormParam
            |
            FormParam
            ;

LocalVarList ::= LocalVarList Type VarDeclList SEMI
            |
            /* epsilon */
            ;

FormParam ::= Type IDENT
            |
            Type IDENT LSQUARE RSQUARE
            ;

Namespace ::= NAMESPACE IDENT LBRACE DeclarationList RBRACE;

VarDeclList ::= VarDeclList COMMA VarDecl
            |
            VarDecl
            ;

ConstDeclList ::= ConstDeclList COMMA ConstDecl
            |
            ConstDecl
            ;

ConstDecl ::= IDENT ASSIGN ConstVals;

VarDecl ::= IDENT
            |
            IDENT LSQUARE RSQUARE
            ;

ConstVals ::= NUMCONST | CHARCONST | BOOLCONST;

Type ::= IDENT COLON COLON IDENT
            |
            IDENT
            ;

